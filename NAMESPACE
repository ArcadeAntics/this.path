useDynLib(this.path, .registration = TRUE, .fixes = ".C_")


## allchar.R    ----


export(Sys.putenv)


## basename2.R  ----


export(basename2, dirname2 )


## checkpath.R  ----


export(check.path, check.dir , check.proj)


## ext.R        ----


export(splitext , removeext, ext      , "ext<-"  )


## fromshell.R  ----


export(from.shell, is.main   )


## lineno.R     ----


export(sys.LINENO, env.LINENO, LINENO)


## ns-hooks.R   ----


# export(FILE, LINE)
export(OS.type)


## pathfuns.R   ----


export(path.functions)


## pathjoin.R   ----


export(path.join)


## pathsplit.R  ----


export(path.split  , path.split.1, path.unsplit)


## progargs.R   ----


export(asArgs  , fileArgs, progArgs, withArgs)


## promises.R   ----


export(initwd   , getinitwd)


## relpath.R    ----


export(as.relative.path, as.rel.path     , relpath         ,
       rel2sys.dir     , rel2sys.proj    ,
       rel2env.dir     , rel2env.proj    ,
       rel2here        , rel2proj        )


## rprojroot.R  ----


export(sys.proj       , env.proj       , this.proj      ,
       reset.proj     , reset.this.proj)


## thispath.R   ----


export(shFILE               , normalized.shFILE    ,
       set.sys.path.jupyter , set.this.path.jupyter,
       sys.path             , sys.dir              ,
       env.path             , env.dir              ,
       this.path            , this.dir             ,
       this.path2           , this.dir2            ,
       this.dir3            , sys.here             ,
       env.here             , here                 ,
       ici                  , Sys.path             ,
       Sys.dir              , try.shFILE           ,
       try.sys.path         , try.env.path         ,
       try.this.path        , local.path           )


## trycatch2.R  ----


export(tryCatch2)


## wrapsource.R ----


export(wrap.source    , set.sys.path   , unset.sys.path ,
       inside.source  , set.this.path  , unset.this.path)
