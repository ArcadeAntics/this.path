useDynLib(this.path, .registration = TRUE, .fixes = ".C_")


## allchar.R    ----


export(Sys.putenv)


## backports.R  ----


if (getRversion() < "3.0.0") {
    export(.mapply)
    export(list.files)
    export(parse)
}


if (getRversion() < "3.1.0") {
    export(anyNA)
    export(anyNA.data.frame)
    export(anyNA.numeric_version)
    export(anyNA.POSIXlt)
    S3method(anyNA, data.frame)
    S3method(anyNA, numeric_version)
    S3method(anyNA, POSIXlt)
    S3method(anyNA, default, .anyNA.default)
}


if (getRversion() < "3.2.0") {
    export(isNamespaceLoaded)
    export(dir.exists)
    export(lengths)
    S3method(lengths, default, .lengths.default)
    export(file.mtime)
    export(file.size)
    export(file.info)
}


if (getRversion() < "3.3.0") {
    export(strrep)
    export(startsWith)
    export(endsWith)
}


if (getRversion() < "3.4.0") {
    export(withAutoprint)
}


if (getRversion() < "3.5.0") {
    export(...length)
    export(isTRUE)
    export(isFALSE)
}


if (getRversion() < "3.6.0") {
    export(errorCondition)
    export(str2expression)
    export(str2lang)
}


if (getRversion() < "4.0.0") {
    export(deparse1)
}


if (getRversion() < "4.1.0") {
    export(...elt)
    export(bquote)
}


if (getRversion() < "4.2.0") {
    export(gettext)
    export(gettextf)
}


## basename2.R  ----


export(basename2, dirname2 )


## checkpath.R  ----


export(check.path, check.dir , check.proj)


## enhances.R   ----


export(with_script_path, make_fix_file)


## ext.R        ----


export(splitext , removeext, ext      , "ext<-"  )


## fromshell.R  ----


export(from.shell, is.main   )


## lineno.R     ----


export(sys.LINENO, env.LINENO, src.LINENO, LINENO, LINE)
export(source.exprs)


## ns-hooks.R   ----


export(OS.type)


## pathfuns.R   ----


export(path.functions)


## pathjoin.R   ----


export(path.join)


## pathsplit.R  ----


export(path.split  , path.split.1, path.unsplit)


## print.R      ----


S3method(print       , ThisPathDocumentContext)
S3method(format      , ThisPathDocumentContext)
S3method(as.character, ThisPathDocumentContext)


## progargs.R   ----


export(asArgs  , fileArgs, progArgs, withArgs)


## promises.R   ----


export(initwd   , getinitwd)


## relpath.R    ----


export(as.relative.path, as.rel.path     , relpath         ,
       rel2sys.dir     , rel2sys.proj    ,
       rel2env.dir     , rel2env.proj    ,
       rel2src.dir     , rel2src.proj    ,
       rel2here        , rel2proj        )


## rprojroot.R  ----


export(sys.proj       , env.proj       , src.proj       ,
       this.proj      , reset.proj     , reset.this.proj)


## setsyspath.R ----


export(wrap.source          , set.sys.path         ,
       unset.sys.path       , set.env.path         ,
       set.src.path         , set.sys.path.function,
       with_sys.path        , with_site.file       ,
       with_init.file       , inside.source        ,
       set.this.path        , unset.this.path      )


## startup.R    ----


export(site.file, init.file)


## thispath.R   ----


export(shFILE                , set.jupyter.path      ,
       set.sys.path.jupyter  , set.this.path.jupyter ,
       thisPathNotExistsError, thisPathNotFoundError ,
       set.gui.path          , sys.path              ,
       sys.dir               , env.path              ,
       env.dir               , src.path              ,
       src.dir               , this.path             ,
       this.dir              , sys.srcref            ,
       sys.here              , env.here              ,
       src.here              , here                  ,
       ici                   , Sys.path              ,
       Sys.dir               , try.shFILE            ,
       try.sys.path          , try.env.path          ,
       try.src.path          , try.this.path         ,
       FILE                  , local.path            )


## trycatch.R   ----


export(tryCatch2, tryCatch3, last.condition)
