
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "this.path"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "this.path-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('this.path')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("check.path")
> ### * check.path
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: check.path
> ### Title: Check 'this.path()' is Functioning Correctly
> ### Aliases: check.path check.dir
> 
> ### ** Examples
> 
> # this.path::check.path("EOAdjusted/code/provrun.R")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("check.path", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("here")
> ### * here
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: here
> ### Title: Construct Path to File, Beginning with 'this.dir()'
> ### Aliases: here ici
> 
> ### ** Examples
> 
> this.path:::write.code(file = FILE <- tempfile(), {
+ 
+ 
+     this.path::here()
+     this.path::here(.. = 1)
+     this.path::here(.. = 2)
+ 
+ 
+     # use 'here' to read input from a file located nearby
+     this.path::here(.. = 1, "input", "file1.csv")
+ 
+ 
+     # or maybe to run another script
+     this.path::here("script2.R")
+ 
+ 
+ })
> 
> 
> source(FILE, echo = TRUE, verbose = FALSE)

> this.path::here()
[1] "C:/Users/andre/AppData/Local/Temp/RtmpaA02Pq/working_dir/RtmpUFUppF"

> this.path::here(.. = 1)
[1] "C:/Users/andre/AppData/Local/Temp/RtmpaA02Pq/working_dir"

> this.path::here(.. = 2)
[1] "C:/Users/andre/AppData/Local/Temp/RtmpaA02Pq"

> this.path::here(.. = 1, "input", "file1.csv")
[1] "C:/Users/andre/AppData/Local/Temp/RtmpaA02Pq/working_dir/input/file1.csv"

> this.path::here("script2.R")
[1] "C:/Users/andre/AppData/Local/Temp/RtmpaA02Pq/working_dir/RtmpUFUppF/script2.R"
> ## Don't show: 
> unlink(FILE)
> ## End(Don't show)
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("here", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("this.path")
> ### * this.path
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: this.path
> ### Title: Determine Executing Script's Filename
> ### Aliases: this.path this.dir
> 
> ### ** Examples
> ## Don't show: 
> .unload <- !isNamespaceLoaded("testthat")
> ## End(Don't show)
> this.path:::write.code(file = FILE <- tempfile(), {
+ 
+     withAutoprint({
+ 
+ 
+         cat(sQuote(this.path::this.path(verbose = TRUE)), "\n\n")
+ 
+ 
+     }, verbose = FALSE)
+ 
+ })
> 
> 
> source(FILE, verbose = FALSE)
> cat(sQuote(this.path::this.path(verbose = TRUE)), "\n\n")
Source: call to function source
'C:/Users/andre/AppData/Local/Temp/RtmpaA02Pq/working_dir/RtmpUFUppF/file5c039671cb6' 

> sys.source(FILE, envir = environment())
> cat(sQuote(this.path::this.path(verbose = TRUE)), "\n\n")
Source: call to function sys.source
'C:/Users/andre/AppData/Local/Temp/RtmpaA02Pq/working_dir/RtmpUFUppF/file5c039671cb6' 

> if (.Platform$GUI == "RStudio")
+     get("debugSource", "tools:rstudio", inherits = FALSE)(FILE)
> if (requireNamespace("testthat"))
+     testthat::source_file(FILE, chdir = FALSE, wrap = FALSE)
Loading required namespace: testthat
Failed with error:  'there is no package called 'testthat''
> 
> 
> this.path:::.Rscript(c("--default-packages=NULL", "--vanilla", FILE))
"C:/PROGRA~1/R/R-4.1.2/bin/x64/Rscript" "--default-packages=NULL" "--vanilla" "C:\Users\andre\AppData\Local\Temp\RtmpaA02Pq/working_dir\RtmpUFUppF\file5c039671cb6"
> cat(sQuote(this.path::this.path(verbose = TRUE)), "\n\n")
Source: shell argument 'FILE'
'C:/Users/andre/AppData/Local/Temp/RtmpaA02Pq/working_dir/RtmpUFUppF/file5c039671cb6' 

> 
> 
> # this.path also works when source-ing a URL
> # (included tryCatch in case an internet connection is not available)
> tryCatch({
+     source("https://raw.githubusercontent.com/ArcadeAntics/this.path/main/tests/this.path_w_URLs.R")
+ }, condition = base::message)
Executing script's path:
Source: call to function source
'https://raw.githubusercontent.com/ArcadeAntics/this.path/main/tests/this.path_w_URLs.R'

Executing script's directory:
Source: call to function source
'https://raw.githubusercontent.com/ArcadeAntics/this.path/main/tests'

Testing 'here':
> this.path::here("test.R")
[1] "https://raw.githubusercontent.com/ArcadeAntics/this.path/main/tests/test.R"
> this.path::here(.. = 1, "R", "this.path.R")
[1] "https://raw.githubusercontent.com/ArcadeAntics/this.path/main/R/this.path.R"




> ## Don't show: 
> unlink(FILE) ; if (.unload) unloadNamespace("testthat")
> ## End(Don't show)
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("this.path", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("this.path2")
> ### * this.path2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: this.path2
> ### Title: Determine Executing Script's Filename
> ### Aliases: this.path2 this.dir2 this.dir3
> 
> ### ** Examples
> 
> this.path:::.Rscript(c("--default-packages=NULL", "--vanilla", "-e", "this.path::this.path()" ))
"C:/PROGRA~1/R/R-4.1.2/bin/x64/Rscript" "--default-packages=NULL" "--vanilla" "-e" "this.path::this.path()"
Error in this.path::this.path() : 
  'this.path' used in an inappropriate fashion
* no appropriate source call was found up the calling stack
* R is being run from a shell and argument 'FILE' is missing
Calls: <Anonymous> -> error
Execution halted
> this.path:::.Rscript(c("--default-packages=NULL", "--vanilla", "-e", "this.path::this.path2()"))
"C:/PROGRA~1/R/R-4.1.2/bin/x64/Rscript" "--default-packages=NULL" "--vanilla" "-e" "this.path::this.path2()"
NULL
> 
> this.path:::.Rscript(c("--default-packages=NULL", "--vanilla", "-e", "this.path::this.dir()"  ))
"C:/PROGRA~1/R/R-4.1.2/bin/x64/Rscript" "--default-packages=NULL" "--vanilla" "-e" "this.path::this.dir()"
Error in this.path(...) : 'this.path' used in an inappropriate fashion
* no appropriate source call was found up the calling stack
* R is being run from a shell and argument 'FILE' is missing
Calls: <Anonymous> -> this.path -> error
Execution halted
> this.path:::.Rscript(c("--default-packages=NULL", "--vanilla", "-e", "this.path::this.dir2()" ))
"C:/PROGRA~1/R/R-4.1.2/bin/x64/Rscript" "--default-packages=NULL" "--vanilla" "-e" "this.path::this.dir2()"
NULL
> this.path:::.Rscript(c("--default-packages=NULL", "--vanilla", "-e", "this.path::this.dir3()" ))
"C:/PROGRA~1/R/R-4.1.2/bin/x64/Rscript" "--default-packages=NULL" "--vanilla" "-e" "this.path::this.dir3()"
[1] "C:/Users/andre/Documents/this.path/this.path.Rcheck"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("this.path2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.17 0.06 0.66 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
